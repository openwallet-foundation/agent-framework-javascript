diff --git a/node_modules/ref-napi/src/binding.cc b/node_modules/ref-napi/src/binding.cc
index abd43ae..b1d429f 100644
--- a/node_modules/ref-napi/src/binding.cc
+++ b/node_modules/ref-napi/src/binding.cc
@@ -105,12 +105,12 @@ class InstanceData final : public RefNapi::Instance {
 
     auto it = pointer_to_orig_buffer.find(ptr);
     if (it != pointer_to_orig_buffer.end()) {
+      it->second.finalizer_count++;
       if (!it->second.ab.Value().IsEmpty()) {
         // Already have a valid entry, nothing to do.
         return;
       }
       it->second.ab.Reset(buf, 0);
-      it->second.finalizer_count++;
     } else {
       pointer_to_orig_buffer.emplace(ptr, ArrayBufferEntry {
         Reference<ArrayBuffer>::New(buf, 0),
@@ -140,8 +140,9 @@ class InstanceData final : public RefNapi::Instance {
     if (it != pointer_to_orig_buffer.end())
       ab = it->second.ab.Value();
 
-    if (ab.IsEmpty()) {
-      length = std::max<size_t>(length, kMaxLength);
+    if (ab.IsEmpty() || (ab.ByteLength() < length)) {
+      length = std::min<size_t>(length, kMaxLength);
+      length = std::max<size_t>(length,1);
       ab = Buffer<char>::New(env, ptr, length, [this](Env env, char* ptr) {
         UnregisterArrayBuffer(ptr);
       }).ArrayBuffer();
@@ -330,6 +331,8 @@ Value ReadPointer(const CallbackInfo& args) {
   int64_t size = args[2].ToNumber();
 
   char* val = *reinterpret_cast<char**>(ptr);
+  if(val != nullptr && size == 0) size = 1;
+
   return WrapPointer(env, val, size);
 }
 
